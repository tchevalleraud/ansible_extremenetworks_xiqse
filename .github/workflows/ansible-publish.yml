name: Publish Collection to Ansible Galaxy

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.x'

#      - name: Install Ansible and dependencies
#        run: |
#          pip install ansible ansible-lint

      - name: Get last tag or fallback
        id: commits
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            range="$last_tag..HEAD"
          else
            last_tag=""
            range="HEAD"
          fi

          echo "tag=$last_tag" >> $GITHUB_OUTPUT
          commits=$(git log $range --pretty=format:"%s")
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump from hashtags
        id: bump
        run: |
          bump="patch"
          echo "${{ steps.commits.outputs.commits }}" | grep -qi '#major' && bump="major"
          echo "${{ steps.commits.outputs.commits }}" | grep -qi '#minor' && bump="minor"
          echo "bump=$bump" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: newversion
        run: |
          old="${{ steps.commits.outputs.tag }}"
          [ -z "$old" ] && old="v0.0.0"
          echo "üîç Last tag: $old"
          old=${old#v}
          IFS='.' read -r major minor patch <<< "$old"
          case "${{ steps.bump.outputs.bump }}" in
            major) major=$((major+1)); minor=0; patch=0 ;;
            minor) minor=$((minor+1)); patch=0 ;;
            patch) patch=$((patch+1)) ;;
          esac
          newfull="v$major.$minor.$patch"
          newpure="$major.$minor.$patch"
          echo "newfull=$newfull" >> $GITHUB_OUTPUT
          echo "newpure=$newpure" >> $GITHUB_OUTPUT
          echo "old=$old" >> $GITHUB_OUTPUT

      - name: Show new version
        run: |
          echo "üîñ New version is ${{ steps.newversion.outputs.newfull }}."
          echo "üîñ New version is ${{ steps.newversion.outputs.newpure }}."
          echo "Search version is ${{ steps.newversion.outputs.old }}."

      - name: Replace version in README.md and Galaxy.yml
        uses: richardrigutins/replace-in-files@v2
        with:
          files: galaxy.yml
          search-text: '${{ steps.newversion.outputs.old }}'
          replacement-text: '${{ steps.newversion.outputs.newpure }}'

      - name: Show Galaxy.yml content
        run: |
          echo "üìÑ Content of Galaxy.yml:"
          cat galaxy.yml

      - uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions

#      - name: Create new tag (if not exists)
#        run: |
#          tag="${{ steps.newversion.outputs.newfull }}"
#          if git rev-parse "$tag" >/dev/null 2>&1; then
#            echo "‚ö†Ô∏è Tag $tag already exists. Skipping creation."
#          else
#            git tag "$tag"
#            git push origin "$tag"
#            echo "üè∑Ô∏è Created and pushed tag $tag"
#          fi

#      - name: Build Ansible Collection
#        run: |
#          ansible-galaxy collection build --output-path ./dist

#      - name: Publish Collection
#        env:
#          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
#        run: |
#          ansible-galaxy collection publish dist/*.tar.gz --api-key "$ANSIBLE_GALAXY_API_KEY"